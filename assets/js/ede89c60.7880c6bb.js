"use strict";(self.webpackChunkdocumentation_nf=self.webpackChunkdocumentation_nf||[]).push([[2069],{7828:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=n(4848),i=n(8453);const r={id:"how-to",title:"How To",description:"Guide on using classes in your project",slug:"/how-to",sidebar_position:3},s=void 0,a={id:"getting-started/how-to",title:"How To",description:"Guide on using classes in your project",source:"@site/docs/getting-started/how-to.mdx",sourceDirName:"getting-started",slug:"/how-to",permalink:"/docs/how-to",draft:!1,unlisted:!1,editUrl:"https://github.com/nativeflowteam/documentation/blob/main/docs/getting-started/how-to.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"how-to",title:"How To",description:"Guide on using classes in your project",slug:"/how-to",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Editor Setup",permalink:"/docs/editor-setup"},next:{title:"Layout",permalink:"/docs/layout"}},l={},c=[{value:"Example",id:"example",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Learn how to effectively use utility classes in your React Native project."}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(t.p,{children:["An easy Goal Tracker App utilizing ",(0,o.jsx)(t.code,{children:"nativeflowcss"})," classes"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:'title="App.jsx"',children:'import { useState } from \'react\'\nimport { StyleSheet, Text, View, Button, TextInput } from \'react-native\';\nimport { p, m, flex, border } from \'nativeflowcss\'\n\nexport default function App() {\n  const [currentGoalInput, setCurrentGoalInput] = useState(\'\')\n  \n  function handleGoalInput(input) {\n    setCurrentGoalInput(input)\n  }\n\n  function handleGoalAdd () {\n    console.log(currentGoalInput)\n  }\n\n  return (\n    <View style={[p.t(56), p.x(32), flex.f(1)]}>\n      <View\n        style={[\n          flex.row,\n          flex.justify("around"),\n          flex.gap(12),\n          flex.items("center"),\n          flex.f(1),\n        ]}\n      >\n        <TextInput\n          placeholder="Your div centering goal!"\n          keyboardType="alphanumeric"\n          style={[border.width(), border.color("#cccccc"), flex.f(), p.p(6)]}\n          onChangeText={handleGoalInput}\n        />\n        <Button title="Add Goal" onPress={handleGoalAdd} />\n      </View>\n      <View style={[flex.f(5)]}>\n        <Text>A list of Goals...</Text>\n      </View>\n    </View>\n  );\n}\n\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(6540);const i={},r=o.createContext(i);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);